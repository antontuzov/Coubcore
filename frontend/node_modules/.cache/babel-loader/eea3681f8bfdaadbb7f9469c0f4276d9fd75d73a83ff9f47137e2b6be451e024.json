{"ast":null,"code":"import axios from 'axios';\n\n// API base URL - this should match your Go backend\nconst API_BASE_URL = 'http://localhost:8080/api/v1';\n\n// Create an axios instance\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000\n});\n\n// Get blockchain info\nexport const getBlockchainInfo = async () => {\n  try {\n    const response = await apiClient.get('/info');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching blockchain info:', error);\n    throw error;\n  }\n};\n\n// Get a block by index\nexport const getBlock = async index => {\n  try {\n    const response = await apiClient.get(`/block?index=${index}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching block ${index}:`, error);\n    throw error;\n  }\n};\n\n// Get a transaction by ID\nexport const getTransaction = async txid => {\n  try {\n    const response = await apiClient.get(`/transaction?txid=${txid}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching transaction ${txid}:`, error);\n    throw error;\n  }\n};\n\n// Get balance for an address\nexport const getBalance = async address => {\n  try {\n    const response = await apiClient.get(`/balance?address=${address}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching balance for ${address}:`, error);\n    throw error;\n  }\n};\n\n// Get connected peers\nexport const getPeers = async () => {\n  try {\n    const response = await apiClient.get('/peers');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching peers:', error);\n    throw error;\n  }\n};\n\n// Send a transaction\nexport const sendTransaction = async transaction => {\n  try {\n    const response = await apiClient.post('/send', transaction);\n    return response.data;\n  } catch (error) {\n    console.error('Error sending transaction:', error);\n    throw error;\n  }\n};\nexport default {\n  getBlockchainInfo,\n  getBlock,\n  getTransaction,\n  getBalance,\n  getPeers,\n  sendTransaction\n};","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","timeout","getBlockchainInfo","response","get","data","error","console","getBlock","index","getTransaction","txid","getBalance","address","getPeers","sendTransaction","transaction","post"],"sources":["/Users/admin/Documents/Forbest/Coubcore/frontend/src/services/blockchainAPI.ts"],"sourcesContent":["import axios from 'axios';\n\n// API base URL - this should match your Go backend\nconst API_BASE_URL = 'http://localhost:8080/api/v1';\n\n// Create an axios instance\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n});\n\n// Get blockchain info\nexport const getBlockchainInfo = async () => {\n  try {\n    const response = await apiClient.get('/info');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching blockchain info:', error);\n    throw error;\n  }\n};\n\n// Get a block by index\nexport const getBlock = async (index: number) => {\n  try {\n    const response = await apiClient.get(`/block?index=${index}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching block ${index}:`, error);\n    throw error;\n  }\n};\n\n// Get a transaction by ID\nexport const getTransaction = async (txid: string) => {\n  try {\n    const response = await apiClient.get(`/transaction?txid=${txid}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching transaction ${txid}:`, error);\n    throw error;\n  }\n};\n\n// Get balance for an address\nexport const getBalance = async (address: string) => {\n  try {\n    const response = await apiClient.get(`/balance?address=${address}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching balance for ${address}:`, error);\n    throw error;\n  }\n};\n\n// Get connected peers\nexport const getPeers = async () => {\n  try {\n    const response = await apiClient.get('/peers');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching peers:', error);\n    throw error;\n  }\n};\n\n// Send a transaction\nexport const sendTransaction = async (transaction: any) => {\n  try {\n    const response = await apiClient.post('/send', transaction);\n    return response.data;\n  } catch (error) {\n    console.error('Error sending transaction:', error);\n    throw error;\n  }\n};\n\nexport default {\n  getBlockchainInfo,\n  getBlock,\n  getTransaction,\n  getBalance,\n  getPeers,\n  sendTransaction,\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG,8BAA8B;;AAEnD;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAG,CAAC,OAAO,CAAC;IAC7C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,QAAQ,GAAG,MAAOC,KAAa,IAAK;EAC/C,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAG,CAAC,gBAAgBK,KAAK,EAAE,CAAC;IAC7D,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwBG,KAAK,GAAG,EAAEH,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,cAAc,GAAG,MAAOC,IAAY,IAAK;EACpD,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAG,CAAC,qBAAqBO,IAAI,EAAE,CAAC;IACjE,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8BK,IAAI,GAAG,EAAEL,KAAK,CAAC;IAC3D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,UAAU,GAAG,MAAOC,OAAe,IAAK;EACnD,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAG,CAAC,oBAAoBS,OAAO,EAAE,CAAC;IACnE,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8BO,OAAO,GAAG,EAAEP,KAAK,CAAC;IAC9D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAG,CAAC,QAAQ,CAAC;IAC9C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,eAAe,GAAG,MAAOC,WAAgB,IAAK;EACzD,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAML,SAAS,CAACmB,IAAI,CAAC,OAAO,EAAED,WAAW,CAAC;IAC3D,OAAOb,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAe;EACbJ,iBAAiB;EACjBM,QAAQ;EACRE,cAAc;EACdE,UAAU;EACVE,QAAQ;EACRC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}