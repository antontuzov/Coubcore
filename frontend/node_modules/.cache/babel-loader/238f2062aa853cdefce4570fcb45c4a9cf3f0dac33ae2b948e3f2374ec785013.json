{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';// Define theme types\n// Define the theme context type\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Create the theme context\nconst ThemeContext=/*#__PURE__*/createContext(undefined);// Theme provider component\nexport const ThemeProvider=_ref=>{let{children}=_ref;const[theme,setTheme]=useState(()=>{const savedTheme=localStorage.getItem('theme');return savedTheme||'system';});const[colorScheme,setColorScheme]=useState(()=>{const savedColorScheme=localStorage.getItem('colorScheme');return savedColorScheme||'blue';});// Apply theme to document\nuseEffect(()=>{const root=document.documentElement;// Remove existing theme classes\nroot.classList.remove('light','dark');// Apply theme based on user preference or system preference\nif(theme==='system'){const systemTheme=window.matchMedia('(prefers-color-scheme: dark)').matches?'dark':'light';root.classList.add(systemTheme);}else{root.classList.add(theme);}// Save theme preference\nlocalStorage.setItem('theme',theme);},[theme]);// Apply color scheme to document\nuseEffect(()=>{const root=document.documentElement;// Remove existing color scheme classes\nroot.classList.remove('blue','green','purple','red');// Apply color scheme\nroot.classList.add(colorScheme);// Save color scheme preference\nlocalStorage.setItem('colorScheme',colorScheme);},[colorScheme]);// Toggle between light and dark theme\nconst toggleTheme=()=>{setTheme(prevTheme=>{if(prevTheme==='light')return'dark';if(prevTheme==='dark')return'light';return'light';});};// Provide the context value\nconst contextValue={theme,colorScheme,toggleTheme,setTheme,setColorScheme};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:contextValue,children:children});};// Custom hook to use the theme context\nexport const useTheme=()=>{const context=useContext(ThemeContext);if(context===undefined){throw new Error('useTheme must be used within a ThemeProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","ThemeContext","undefined","ThemeProvider","_ref","children","theme","setTheme","savedTheme","localStorage","getItem","colorScheme","setColorScheme","savedColorScheme","root","document","documentElement","classList","remove","systemTheme","window","matchMedia","matches","add","setItem","toggleTheme","prevTheme","contextValue","Provider","value","useTheme","context","Error"],"sources":["/Users/admin/Documents/Forbest/Coubcore/frontend/src/contexts/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\n// Define theme types\nexport type Theme = 'light' | 'dark' | 'system';\nexport type ColorScheme = 'blue' | 'green' | 'purple' | 'red';\n\n// Define the theme context type\ninterface ThemeContextType {\n  theme: Theme;\n  colorScheme: ColorScheme;\n  toggleTheme: () => void;\n  setTheme: (theme: Theme) => void;\n  setColorScheme: (colorScheme: ColorScheme) => void;\n}\n\n// Create the theme context\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\n// Theme provider component\nexport const ThemeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem('theme') as Theme | null;\n    return savedTheme || 'system';\n  });\n  \n  const [colorScheme, setColorScheme] = useState<ColorScheme>(() => {\n    const savedColorScheme = localStorage.getItem('colorScheme') as ColorScheme | null;\n    return savedColorScheme || 'blue';\n  });\n\n  // Apply theme to document\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Remove existing theme classes\n    root.classList.remove('light', 'dark');\n    \n    // Apply theme based on user preference or system preference\n    if (theme === 'system') {\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n      root.classList.add(systemTheme);\n    } else {\n      root.classList.add(theme);\n    }\n    \n    // Save theme preference\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // Apply color scheme to document\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Remove existing color scheme classes\n    root.classList.remove('blue', 'green', 'purple', 'red');\n    \n    // Apply color scheme\n    root.classList.add(colorScheme);\n    \n    // Save color scheme preference\n    localStorage.setItem('colorScheme', colorScheme);\n  }, [colorScheme]);\n\n  // Toggle between light and dark theme\n  const toggleTheme = () => {\n    setTheme(prevTheme => {\n      if (prevTheme === 'light') return 'dark';\n      if (prevTheme === 'dark') return 'light';\n      return 'light';\n    });\n  };\n\n  // Provide the context value\n  const contextValue: ThemeContextType = {\n    theme,\n    colorScheme,\n    toggleTheme,\n    setTheme,\n    setColorScheme\n  };\n\n  return (\n    <ThemeContext.Provider value={contextValue}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// Custom hook to use the theme context\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  \n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  \n  return context;\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAmB,OAAO,CAExF;AAIA;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBASA;AACA,KAAM,CAAAC,YAAY,cAAGN,aAAa,CAA+BO,SAAS,CAAC,CAE3E;AACA,MAAO,MAAM,CAAAC,aAAgD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC3E,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGV,QAAQ,CAAQ,IAAM,CAC9C,KAAM,CAAAW,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAiB,CAChE,MAAO,CAAAF,UAAU,EAAI,QAAQ,CAC/B,CAAC,CAAC,CAEF,KAAM,CAACG,WAAW,CAAEC,cAAc,CAAC,CAAGf,QAAQ,CAAc,IAAM,CAChE,KAAM,CAAAgB,gBAAgB,CAAGJ,YAAY,CAACC,OAAO,CAAC,aAAa,CAAuB,CAClF,MAAO,CAAAG,gBAAgB,EAAI,MAAM,CACnC,CAAC,CAAC,CAEF;AACAf,SAAS,CAAC,IAAM,CACd,KAAM,CAAAgB,IAAI,CAAGC,QAAQ,CAACC,eAAe,CAErC;AACAF,IAAI,CAACG,SAAS,CAACC,MAAM,CAAC,OAAO,CAAE,MAAM,CAAC,CAEtC;AACA,GAAIZ,KAAK,GAAK,QAAQ,CAAE,CACtB,KAAM,CAAAa,WAAW,CAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,CAAG,MAAM,CAAG,OAAO,CAChGR,IAAI,CAACG,SAAS,CAACM,GAAG,CAACJ,WAAW,CAAC,CACjC,CAAC,IAAM,CACLL,IAAI,CAACG,SAAS,CAACM,GAAG,CAACjB,KAAK,CAAC,CAC3B,CAEA;AACAG,YAAY,CAACe,OAAO,CAAC,OAAO,CAAElB,KAAK,CAAC,CACtC,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CAEX;AACAR,SAAS,CAAC,IAAM,CACd,KAAM,CAAAgB,IAAI,CAAGC,QAAQ,CAACC,eAAe,CAErC;AACAF,IAAI,CAACG,SAAS,CAACC,MAAM,CAAC,MAAM,CAAE,OAAO,CAAE,QAAQ,CAAE,KAAK,CAAC,CAEvD;AACAJ,IAAI,CAACG,SAAS,CAACM,GAAG,CAACZ,WAAW,CAAC,CAE/B;AACAF,YAAY,CAACe,OAAO,CAAC,aAAa,CAAEb,WAAW,CAAC,CAClD,CAAC,CAAE,CAACA,WAAW,CAAC,CAAC,CAEjB;AACA,KAAM,CAAAc,WAAW,CAAGA,CAAA,GAAM,CACxBlB,QAAQ,CAACmB,SAAS,EAAI,CACpB,GAAIA,SAAS,GAAK,OAAO,CAAE,MAAO,MAAM,CACxC,GAAIA,SAAS,GAAK,MAAM,CAAE,MAAO,OAAO,CACxC,MAAO,OAAO,CAChB,CAAC,CAAC,CACJ,CAAC,CAED;AACA,KAAM,CAAAC,YAA8B,CAAG,CACrCrB,KAAK,CACLK,WAAW,CACXc,WAAW,CACXlB,QAAQ,CACRK,cACF,CAAC,CAED,mBACEZ,IAAA,CAACC,YAAY,CAAC2B,QAAQ,EAACC,KAAK,CAAEF,YAAa,CAAAtB,QAAA,CACxCA,QAAQ,CACY,CAAC,CAE5B,CAAC,CAED;AACA,MAAO,MAAM,CAAAyB,QAAQ,CAAGA,CAAA,GAAwB,CAC9C,KAAM,CAAAC,OAAO,CAAGnC,UAAU,CAACK,YAAY,CAAC,CAExC,GAAI8B,OAAO,GAAK7B,SAAS,CAAE,CACzB,KAAM,IAAI,CAAA8B,KAAK,CAAC,8CAA8C,CAAC,CACjE,CAEA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}