{"ast":null,"code":"// Utility functions for cryptographic operations\n// Convert a string to a hex representation\nexport const stringToHex=str=>{let hex='';for(let i=0;i<str.length;i++){const charCode=str.charCodeAt(i);const hexValue=charCode.toString(16);hex+=hexValue.padStart(2,'0');}return hex;};// Convert hex to a string\nexport const hexToString=hex=>{let str='';for(let i=0;i<hex.length;i+=2){const hexValue=hex.substr(i,2);const charCode=parseInt(hexValue,16);str+=String.fromCharCode(charCode);}return str;};// Generate a simple hash (for demonstration purposes only)\nexport const simpleHash=data=>{let hash=0;for(let i=0;i<data.length;i++){const char=data.charCodeAt(i);hash=(hash<<5)-hash+char;hash=hash&hash;// Convert to 32bit integer\n}return Math.abs(hash).toString(16);};// Validate an address format (basic validation)\nexport const validateAddress=address=>{// Basic validation - check if it's a hex string of appropriate length\nconst hexRegex=/^[0-9a-fA-F]+$/;return hexRegex.test(address)&&address.length===40;};export default{stringToHex,hexToString,simpleHash,validateAddress};","map":{"version":3,"names":["stringToHex","str","hex","i","length","charCode","charCodeAt","hexValue","toString","padStart","hexToString","substr","parseInt","String","fromCharCode","simpleHash","data","hash","char","Math","abs","validateAddress","address","hexRegex","test"],"sources":["/Users/admin/Documents/Forbest/Coubcore/frontend/src/utils/crypto.ts"],"sourcesContent":["// Utility functions for cryptographic operations\n\n// Convert a string to a hex representation\nexport const stringToHex = (str: string): string => {\n  let hex = '';\n  for (let i = 0; i < str.length; i++) {\n    const charCode = str.charCodeAt(i);\n    const hexValue = charCode.toString(16);\n    hex += hexValue.padStart(2, '0');\n  }\n  return hex;\n};\n\n// Convert hex to a string\nexport const hexToString = (hex: string): string => {\n  let str = '';\n  for (let i = 0; i < hex.length; i += 2) {\n    const hexValue = hex.substr(i, 2);\n    const charCode = parseInt(hexValue, 16);\n    str += String.fromCharCode(charCode);\n  }\n  return str;\n};\n\n// Generate a simple hash (for demonstration purposes only)\nexport const simpleHash = (data: string): string => {\n  let hash = 0;\n  for (let i = 0; i < data.length; i++) {\n    const char = data.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return Math.abs(hash).toString(16);\n};\n\n// Validate an address format (basic validation)\nexport const validateAddress = (address: string): boolean => {\n  // Basic validation - check if it's a hex string of appropriate length\n  const hexRegex = /^[0-9a-fA-F]+$/;\n  return hexRegex.test(address) && address.length === 40;\n};\n\nexport default {\n  stringToHex,\n  hexToString,\n  simpleHash,\n  validateAddress,\n};"],"mappings":"AAAA;AAEA;AACA,MAAO,MAAM,CAAAA,WAAW,CAAIC,GAAW,EAAa,CAClD,GAAI,CAAAC,GAAG,CAAG,EAAE,CACZ,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGF,GAAG,CAACG,MAAM,CAAED,CAAC,EAAE,CAAE,CACnC,KAAM,CAAAE,QAAQ,CAAGJ,GAAG,CAACK,UAAU,CAACH,CAAC,CAAC,CAClC,KAAM,CAAAI,QAAQ,CAAGF,QAAQ,CAACG,QAAQ,CAAC,EAAE,CAAC,CACtCN,GAAG,EAAIK,QAAQ,CAACE,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAClC,CACA,MAAO,CAAAP,GAAG,CACZ,CAAC,CAED;AACA,MAAO,MAAM,CAAAQ,WAAW,CAAIR,GAAW,EAAa,CAClD,GAAI,CAAAD,GAAG,CAAG,EAAE,CACZ,IAAK,GAAI,CAAAE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGD,GAAG,CAACE,MAAM,CAAED,CAAC,EAAI,CAAC,CAAE,CACtC,KAAM,CAAAI,QAAQ,CAAGL,GAAG,CAACS,MAAM,CAACR,CAAC,CAAE,CAAC,CAAC,CACjC,KAAM,CAAAE,QAAQ,CAAGO,QAAQ,CAACL,QAAQ,CAAE,EAAE,CAAC,CACvCN,GAAG,EAAIY,MAAM,CAACC,YAAY,CAACT,QAAQ,CAAC,CACtC,CACA,MAAO,CAAAJ,GAAG,CACZ,CAAC,CAED;AACA,MAAO,MAAM,CAAAc,UAAU,CAAIC,IAAY,EAAa,CAClD,GAAI,CAAAC,IAAI,CAAG,CAAC,CACZ,IAAK,GAAI,CAAAd,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGa,IAAI,CAACZ,MAAM,CAAED,CAAC,EAAE,CAAE,CACpC,KAAM,CAAAe,IAAI,CAAGF,IAAI,CAACV,UAAU,CAACH,CAAC,CAAC,CAC/Bc,IAAI,CAAI,CAACA,IAAI,EAAI,CAAC,EAAIA,IAAI,CAAIC,IAAI,CAClCD,IAAI,CAAGA,IAAI,CAAGA,IAAI,CAAE;AACtB,CACA,MAAO,CAAAE,IAAI,CAACC,GAAG,CAACH,IAAI,CAAC,CAACT,QAAQ,CAAC,EAAE,CAAC,CACpC,CAAC,CAED;AACA,MAAO,MAAM,CAAAa,eAAe,CAAIC,OAAe,EAAc,CAC3D;AACA,KAAM,CAAAC,QAAQ,CAAG,gBAAgB,CACjC,MAAO,CAAAA,QAAQ,CAACC,IAAI,CAACF,OAAO,CAAC,EAAIA,OAAO,CAAClB,MAAM,GAAK,EAAE,CACxD,CAAC,CAED,cAAe,CACbJ,WAAW,CACXU,WAAW,CACXK,UAAU,CACVM,eACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}