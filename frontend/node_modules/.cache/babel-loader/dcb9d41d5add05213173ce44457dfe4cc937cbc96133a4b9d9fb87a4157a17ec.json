{"ast":null,"code":"// Utility functions for cryptographic operations\n\n// Convert a string to a hex representation\nexport const stringToHex = str => {\n  let hex = '';\n  for (let i = 0; i < str.length; i++) {\n    const charCode = str.charCodeAt(i);\n    const hexValue = charCode.toString(16);\n    hex += hexValue.padStart(2, '0');\n  }\n  return hex;\n};\n\n// Convert hex to a string\nexport const hexToString = hex => {\n  let str = '';\n  for (let i = 0; i < hex.length; i += 2) {\n    const hexValue = hex.substr(i, 2);\n    const charCode = parseInt(hexValue, 16);\n    str += String.fromCharCode(charCode);\n  }\n  return str;\n};\n\n// Generate a simple hash (for demonstration purposes only)\nexport const simpleHash = data => {\n  let hash = 0;\n  for (let i = 0; i < data.length; i++) {\n    const char = data.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return Math.abs(hash).toString(16);\n};\n\n// Validate an address format (basic validation)\nexport const validateAddress = address => {\n  // Basic validation - check if it's a hex string of appropriate length\n  const hexRegex = /^[0-9a-fA-F]+$/;\n  return hexRegex.test(address) && address.length === 40;\n};\nexport default {\n  stringToHex,\n  hexToString,\n  simpleHash,\n  validateAddress\n};","map":{"version":3,"names":["stringToHex","str","hex","i","length","charCode","charCodeAt","hexValue","toString","padStart","hexToString","substr","parseInt","String","fromCharCode","simpleHash","data","hash","char","Math","abs","validateAddress","address","hexRegex","test"],"sources":["/Users/admin/Documents/Forbest/Coubcore/frontend/src/utils/crypto.ts"],"sourcesContent":["// Utility functions for cryptographic operations\n\n// Convert a string to a hex representation\nexport const stringToHex = (str: string): string => {\n  let hex = '';\n  for (let i = 0; i < str.length; i++) {\n    const charCode = str.charCodeAt(i);\n    const hexValue = charCode.toString(16);\n    hex += hexValue.padStart(2, '0');\n  }\n  return hex;\n};\n\n// Convert hex to a string\nexport const hexToString = (hex: string): string => {\n  let str = '';\n  for (let i = 0; i < hex.length; i += 2) {\n    const hexValue = hex.substr(i, 2);\n    const charCode = parseInt(hexValue, 16);\n    str += String.fromCharCode(charCode);\n  }\n  return str;\n};\n\n// Generate a simple hash (for demonstration purposes only)\nexport const simpleHash = (data: string): string => {\n  let hash = 0;\n  for (let i = 0; i < data.length; i++) {\n    const char = data.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return Math.abs(hash).toString(16);\n};\n\n// Validate an address format (basic validation)\nexport const validateAddress = (address: string): boolean => {\n  // Basic validation - check if it's a hex string of appropriate length\n  const hexRegex = /^[0-9a-fA-F]+$/;\n  return hexRegex.test(address) && address.length === 40;\n};\n\nexport default {\n  stringToHex,\n  hexToString,\n  simpleHash,\n  validateAddress,\n};"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,WAAW,GAAIC,GAAW,IAAa;EAClD,IAAIC,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,MAAME,QAAQ,GAAGJ,GAAG,CAACK,UAAU,CAACH,CAAC,CAAC;IAClC,MAAMI,QAAQ,GAAGF,QAAQ,CAACG,QAAQ,CAAC,EAAE,CAAC;IACtCN,GAAG,IAAIK,QAAQ,CAACE,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAClC;EACA,OAAOP,GAAG;AACZ,CAAC;;AAED;AACA,OAAO,MAAMQ,WAAW,GAAIR,GAAW,IAAa;EAClD,IAAID,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACE,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IACtC,MAAMI,QAAQ,GAAGL,GAAG,CAACS,MAAM,CAACR,CAAC,EAAE,CAAC,CAAC;IACjC,MAAME,QAAQ,GAAGO,QAAQ,CAACL,QAAQ,EAAE,EAAE,CAAC;IACvCN,GAAG,IAAIY,MAAM,CAACC,YAAY,CAACT,QAAQ,CAAC;EACtC;EACA,OAAOJ,GAAG;AACZ,CAAC;;AAED;AACA,OAAO,MAAMc,UAAU,GAAIC,IAAY,IAAa;EAClD,IAAIC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,IAAI,CAACZ,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,MAAMe,IAAI,GAAGF,IAAI,CAACV,UAAU,CAACH,CAAC,CAAC;IAC/Bc,IAAI,GAAI,CAACA,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAIC,IAAI;IAClCD,IAAI,GAAGA,IAAI,GAAGA,IAAI,CAAC,CAAC;EACtB;EACA,OAAOE,IAAI,CAACC,GAAG,CAACH,IAAI,CAAC,CAACT,QAAQ,CAAC,EAAE,CAAC;AACpC,CAAC;;AAED;AACA,OAAO,MAAMa,eAAe,GAAIC,OAAe,IAAc;EAC3D;EACA,MAAMC,QAAQ,GAAG,gBAAgB;EACjC,OAAOA,QAAQ,CAACC,IAAI,CAACF,OAAO,CAAC,IAAIA,OAAO,CAAClB,MAAM,KAAK,EAAE;AACxD,CAAC;AAED,eAAe;EACbJ,WAAW;EACXU,WAAW;EACXK,UAAU;EACVM;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}