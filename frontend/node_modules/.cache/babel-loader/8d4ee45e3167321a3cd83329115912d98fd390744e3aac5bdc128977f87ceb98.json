{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/Forbest/Coubcore/frontend/src/contexts/ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Define theme types\n\n// Define the theme context type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the theme context\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\n\n// Theme provider component\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return savedTheme || 'system';\n  });\n  const [colorScheme, setColorScheme] = useState(() => {\n    const savedColorScheme = localStorage.getItem('colorScheme');\n    return savedColorScheme || 'blue';\n  });\n\n  // Apply theme to document\n  useEffect(() => {\n    const root = document.documentElement;\n\n    // Remove existing theme classes\n    root.classList.remove('light', 'dark');\n\n    // Apply theme based on user preference or system preference\n    if (theme === 'system') {\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n      root.classList.add(systemTheme);\n    } else {\n      root.classList.add(theme);\n    }\n\n    // Save theme preference\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // Apply color scheme to document\n  useEffect(() => {\n    const root = document.documentElement;\n\n    // Remove existing color scheme classes\n    root.classList.remove('blue', 'green', 'purple', 'red');\n\n    // Apply color scheme\n    root.classList.add(colorScheme);\n\n    // Save color scheme preference\n    localStorage.setItem('colorScheme', colorScheme);\n  }, [colorScheme]);\n\n  // Toggle between light and dark theme\n  const toggleTheme = () => {\n    setTheme(prevTheme => {\n      if (prevTheme === 'light') return 'dark';\n      if (prevTheme === 'dark') return 'light';\n      return 'light';\n    });\n  };\n\n  // Provide the context value\n  const contextValue = {\n    theme,\n    colorScheme,\n    toggleTheme,\n    setTheme,\n    setColorScheme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the theme context\n_s(ThemeProvider, \"V+3zoNK7IjTn9R6NjspgWmK78M4=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","theme","setTheme","savedTheme","localStorage","getItem","colorScheme","setColorScheme","savedColorScheme","root","document","documentElement","classList","remove","systemTheme","window","matchMedia","matches","add","setItem","toggleTheme","prevTheme","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["/Users/admin/Documents/Forbest/Coubcore/frontend/src/contexts/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\n// Define theme types\nexport type Theme = 'light' | 'dark' | 'system';\nexport type ColorScheme = 'blue' | 'green' | 'purple' | 'red';\n\n// Define the theme context type\ninterface ThemeContextType {\n  theme: Theme;\n  colorScheme: ColorScheme;\n  toggleTheme: () => void;\n  setTheme: (theme: Theme) => void;\n  setColorScheme: (colorScheme: ColorScheme) => void;\n}\n\n// Create the theme context\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\n// Theme provider component\nexport const ThemeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem('theme') as Theme | null;\n    return savedTheme || 'system';\n  });\n  \n  const [colorScheme, setColorScheme] = useState<ColorScheme>(() => {\n    const savedColorScheme = localStorage.getItem('colorScheme') as ColorScheme | null;\n    return savedColorScheme || 'blue';\n  });\n\n  // Apply theme to document\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Remove existing theme classes\n    root.classList.remove('light', 'dark');\n    \n    // Apply theme based on user preference or system preference\n    if (theme === 'system') {\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n      root.classList.add(systemTheme);\n    } else {\n      root.classList.add(theme);\n    }\n    \n    // Save theme preference\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // Apply color scheme to document\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Remove existing color scheme classes\n    root.classList.remove('blue', 'green', 'purple', 'red');\n    \n    // Apply color scheme\n    root.classList.add(colorScheme);\n    \n    // Save color scheme preference\n    localStorage.setItem('colorScheme', colorScheme);\n  }, [colorScheme]);\n\n  // Toggle between light and dark theme\n  const toggleTheme = () => {\n    setTheme(prevTheme => {\n      if (prevTheme === 'light') return 'dark';\n      if (prevTheme === 'dark') return 'light';\n      return 'light';\n    });\n  };\n\n  // Provide the context value\n  const contextValue: ThemeContextType = {\n    theme,\n    colorScheme,\n    toggleTheme,\n    setTheme,\n    setColorScheme\n  };\n\n  return (\n    <ThemeContext.Provider value={contextValue}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// Custom hook to use the theme context\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  \n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  \n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}