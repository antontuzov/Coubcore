{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/Forbest/Coubcore/frontend/src/components/BlockchainExplorer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport BlockList from './BlockList';\nimport BlockDetail from './BlockDetail';\nimport TransactionDetail from './TransactionDetail';\nimport NetworkStats from './NetworkStats';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlockchainExplorer = () => {\n  _s();\n  const [blocks, setBlocks] = useState([]);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n  const [selectedTransaction, setSelectedTransaction] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // Fetch initial blocks\n  useEffect(() => {\n    const fetchBlocks = async () => {\n      try {\n        setLoading(true);\n        // In a real implementation, we would fetch actual blocks\n        // For now, we'll use sample data\n        const sampleBlocks = [{\n          index: 100,\n          timestamp: new Date().toISOString(),\n          previousHash: '0000000000000000000a5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n          hash: '0000000000000000000b5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2b',\n          data: 'Block data 100',\n          nonce: 12345,\n          difficulty: 5,\n          validator: 'validator_1'\n        }, {\n          index: 99,\n          timestamp: new Date(Date.now() - 1000 * 60 * 10).toISOString(),\n          previousHash: '0000000000000000000a4d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n          hash: '0000000000000000000a5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n          data: 'Block data 99',\n          nonce: 23456,\n          difficulty: 5,\n          validator: 'validator_2'\n        }, {\n          index: 98,\n          timestamp: new Date(Date.now() - 1000 * 60 * 20).toISOString(),\n          previousHash: '0000000000000000000a3d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n          hash: '0000000000000000000a4d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n          data: 'Block data 98',\n          nonce: 34567,\n          difficulty: 5,\n          validator: 'validator_1'\n        }];\n        setBlocks(sampleBlocks);\n        setLoading(false);\n      } catch (err) {\n        setError('Failed to fetch blocks');\n        setLoading(false);\n      }\n    };\n    fetchBlocks();\n  }, []);\n  const handleBlockSelect = async block => {\n    setSelectedBlock(block);\n    setSelectedTransaction(null);\n  };\n  const handleTransactionSelect = transaction => {\n    setSelectedTransaction(transaction);\n  };\n  const handleBackToBlocks = () => {\n    setSelectedBlock(null);\n  };\n  const handleBackToBlockDetail = () => {\n    setSelectedTransaction(null);\n  };\n  const handleSearch = async query => {\n    try {\n      // Check if query is a block index\n      if (/^\\d+$/.test(query)) {\n        const blockIndex = parseInt(query, 10);\n        // In a real implementation, we would fetch the block\n        // const block = await blockchainAPI.getBlock(blockIndex);\n        // For now, we'll use sample data\n        const sampleBlock = {\n          index: blockIndex,\n          timestamp: new Date().toISOString(),\n          previousHash: '0000000000000000000a5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n          hash: '0000000000000000000b5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2b',\n          data: `Block data ${blockIndex}`,\n          nonce: 12345,\n          difficulty: 5,\n          validator: 'validator_1'\n        };\n        setSelectedBlock(sampleBlock);\n        setSelectedTransaction(null);\n        return;\n      }\n\n      // Check if query is a transaction ID\n      if (query.startsWith('0x') && query.length === 66) {\n        // In a real implementation, we would fetch the transaction\n        // const transaction = await blockchainAPI.getTransaction(query);\n        // For now, we'll use sample data\n        const sampleTransaction = {\n          id: query,\n          inputs: [{\n            txid: 'prev_tx_123',\n            vout: 0,\n            signature: 'sample_signature',\n            pubKey: 'sample_public_key'\n          }],\n          outputs: [{\n            value: 10,\n            pubKeyHash: 'recipient_address'\n          }],\n          time: new Date().toISOString()\n        };\n        setSelectedTransaction(sampleTransaction);\n        setSelectedBlock(null);\n        return;\n      }\n\n      // If we reach here, the query didn't match any known formats\n      setError('No block or transaction found with that identifier');\n    } catch (err) {\n      setError('Search failed. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blockchain-explorer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold text-white mb-8 text-center bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\",\n      children: \"Blockchain Explorer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetworkStats, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 p-4 bg-red-900 bg-opacity-50 rounded-lg border border-red-700 text-red-200\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-8\",\n      children: [!selectedBlock && !selectedTransaction && /*#__PURE__*/_jsxDEV(BlockList, {\n        blocks: blocks,\n        loading: loading,\n        onBlockSelect: handleBlockSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), selectedBlock && !selectedTransaction && /*#__PURE__*/_jsxDEV(BlockDetail, {\n        block: selectedBlock,\n        onBack: handleBackToBlocks,\n        onTransactionSelect: handleTransactionSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), selectedTransaction && /*#__PURE__*/_jsxDEV(TransactionDetail, {\n        transaction: selectedTransaction,\n        onBack: handleBackToBlockDetail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(BlockchainExplorer, \"odKPjqrAW2818NTprci+E26f+Q4=\");\n_c = BlockchainExplorer;\nexport default BlockchainExplorer;\nvar _c;\n$RefreshReg$(_c, \"BlockchainExplorer\");","map":{"version":3,"names":["React","useState","useEffect","BlockList","BlockDetail","TransactionDetail","NetworkStats","jsxDEV","_jsxDEV","BlockchainExplorer","_s","blocks","setBlocks","selectedBlock","setSelectedBlock","selectedTransaction","setSelectedTransaction","loading","setLoading","error","setError","fetchBlocks","sampleBlocks","index","timestamp","Date","toISOString","previousHash","hash","data","nonce","difficulty","validator","now","err","handleBlockSelect","block","handleTransactionSelect","transaction","handleBackToBlocks","handleBackToBlockDetail","handleSearch","query","test","blockIndex","parseInt","sampleBlock","startsWith","length","sampleTransaction","id","inputs","txid","vout","signature","pubKey","outputs","value","pubKeyHash","time","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onBlockSelect","onBack","onTransactionSelect","_c","$RefreshReg$"],"sources":["/Users/admin/Documents/Forbest/Coubcore/frontend/src/components/BlockchainExplorer.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Block, Transaction } from '../types/blockchain';\nimport * as blockchainAPI from '../services/blockchainAPI';\nimport BlockList from './BlockList';\nimport BlockDetail from './BlockDetail';\nimport TransactionDetail from './TransactionDetail';\nimport NetworkStats from './NetworkStats';\n\nconst BlockchainExplorer: React.FC = () => {\n  const [blocks, setBlocks] = useState<Block[]>([]);\n  const [selectedBlock, setSelectedBlock] = useState<Block | null>(null);\n  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // Fetch initial blocks\n  useEffect(() => {\n    const fetchBlocks = async () => {\n      try {\n        setLoading(true);\n        // In a real implementation, we would fetch actual blocks\n        // For now, we'll use sample data\n        const sampleBlocks: Block[] = [\n          {\n            index: 100,\n            timestamp: new Date().toISOString(),\n            previousHash: '0000000000000000000a5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n            hash: '0000000000000000000b5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2b',\n            data: 'Block data 100',\n            nonce: 12345,\n            difficulty: 5,\n            validator: 'validator_1'\n          },\n          {\n            index: 99,\n            timestamp: new Date(Date.now() - 1000 * 60 * 10).toISOString(),\n            previousHash: '0000000000000000000a4d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n            hash: '0000000000000000000a5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n            data: 'Block data 99',\n            nonce: 23456,\n            difficulty: 5,\n            validator: 'validator_2'\n          },\n          {\n            index: 98,\n            timestamp: new Date(Date.now() - 1000 * 60 * 20).toISOString(),\n            previousHash: '0000000000000000000a3d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n            hash: '0000000000000000000a4d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n            data: 'Block data 98',\n            nonce: 34567,\n            difficulty: 5,\n            validator: 'validator_1'\n          }\n        ];\n        setBlocks(sampleBlocks);\n        setLoading(false);\n      } catch (err) {\n        setError('Failed to fetch blocks');\n        setLoading(false);\n      }\n    };\n\n    fetchBlocks();\n  }, []);\n\n  const handleBlockSelect = async (block: Block) => {\n    setSelectedBlock(block);\n    setSelectedTransaction(null);\n  };\n\n  const handleTransactionSelect = (transaction: Transaction) => {\n    setSelectedTransaction(transaction);\n  };\n\n  const handleBackToBlocks = () => {\n    setSelectedBlock(null);\n  };\n\n  const handleBackToBlockDetail = () => {\n    setSelectedTransaction(null);\n  };\n\n  const handleSearch = async (query: string) => {\n    try {\n      // Check if query is a block index\n      if (/^\\d+$/.test(query)) {\n        const blockIndex = parseInt(query, 10);\n        // In a real implementation, we would fetch the block\n        // const block = await blockchainAPI.getBlock(blockIndex);\n        // For now, we'll use sample data\n        const sampleBlock: Block = {\n          index: blockIndex,\n          timestamp: new Date().toISOString(),\n          previousHash: '0000000000000000000a5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n          hash: '0000000000000000000b5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2b',\n          data: `Block data ${blockIndex}`,\n          nonce: 12345,\n          difficulty: 5,\n          validator: 'validator_1'\n        };\n        setSelectedBlock(sampleBlock);\n        setSelectedTransaction(null);\n        return;\n      }\n\n      // Check if query is a transaction ID\n      if (query.startsWith('0x') && query.length === 66) {\n        // In a real implementation, we would fetch the transaction\n        // const transaction = await blockchainAPI.getTransaction(query);\n        // For now, we'll use sample data\n        const sampleTransaction: Transaction = {\n          id: query,\n          inputs: [{\n            txid: 'prev_tx_123',\n            vout: 0,\n            signature: 'sample_signature',\n            pubKey: 'sample_public_key'\n          }],\n          outputs: [{\n            value: 10,\n            pubKeyHash: 'recipient_address'\n          }],\n          time: new Date().toISOString()\n        };\n        setSelectedTransaction(sampleTransaction);\n        setSelectedBlock(null);\n        return;\n      }\n\n      // If we reach here, the query didn't match any known formats\n      setError('No block or transaction found with that identifier');\n    } catch (err) {\n      setError('Search failed. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"blockchain-explorer\">\n      <h1 className=\"text-3xl font-bold text-white mb-8 text-center bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n        Blockchain Explorer\n      </h1>\n\n      <NetworkStats onSearch={handleSearch} />\n\n      {error && (\n        <div className=\"mt-4 p-4 bg-red-900 bg-opacity-50 rounded-lg border border-red-700 text-red-200\">\n          {error}\n        </div>\n      )}\n\n      <div className=\"mt-8\">\n        {!selectedBlock && !selectedTransaction && (\n          <BlockList blocks={blocks} loading={loading} onBlockSelect={handleBlockSelect} />\n        )}\n\n        {selectedBlock && !selectedTransaction && (\n          <BlockDetail block={selectedBlock} onBack={handleBackToBlocks} onTransactionSelect={handleTransactionSelect} />\n        )}\n\n        {selectedTransaction && (\n          <TransactionDetail transaction={selectedTransaction} onBack={handleBackToBlockDetail} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default BlockchainExplorer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}