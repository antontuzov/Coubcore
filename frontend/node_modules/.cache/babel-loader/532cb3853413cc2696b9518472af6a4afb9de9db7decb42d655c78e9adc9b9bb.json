{"ast":null,"code":"import React,{useState,useEffect}from'react';import BlockList from'./BlockList';import BlockDetail from'./BlockDetail';import TransactionDetail from'./TransactionDetail';import NetworkStats from'./NetworkStats';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BlockchainExplorer=()=>{const[blocks,setBlocks]=useState([]);const[selectedBlock,setSelectedBlock]=useState(null);const[selectedTransaction,setSelectedTransaction]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState('');// Fetch initial blocks\nuseEffect(()=>{const fetchBlocks=async()=>{try{setLoading(true);// In a real implementation, we would fetch actual blocks\n// For now, we'll use sample data\nconst sampleBlocks=[{index:100,timestamp:new Date().toISOString(),previousHash:'0000000000000000000a5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',hash:'0000000000000000000b5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2b',data:'Block data 100',nonce:12345,difficulty:5,validator:'validator_1'},{index:99,timestamp:new Date(Date.now()-1000*60*10).toISOString(),previousHash:'0000000000000000000a4d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',hash:'0000000000000000000a5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',data:'Block data 99',nonce:23456,difficulty:5,validator:'validator_2'},{index:98,timestamp:new Date(Date.now()-1000*60*20).toISOString(),previousHash:'0000000000000000000a3d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',hash:'0000000000000000000a4d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',data:'Block data 98',nonce:34567,difficulty:5,validator:'validator_1'}];setBlocks(sampleBlocks);setLoading(false);}catch(err){setError('Failed to fetch blocks');setLoading(false);}};fetchBlocks();},[]);const handleBlockSelect=async block=>{setSelectedBlock(block);setSelectedTransaction(null);};const handleTransactionSelect=transaction=>{setSelectedTransaction(transaction);};const handleBackToBlocks=()=>{setSelectedBlock(null);};const handleBackToBlockDetail=()=>{setSelectedTransaction(null);};const handleSearch=async query=>{try{// Check if query is a block index\nif(/^\\d+$/.test(query)){const blockIndex=parseInt(query,10);// In a real implementation, we would fetch the block\n// const block = await blockchainAPI.getBlock(blockIndex);\n// For now, we'll use sample data\nconst sampleBlock={index:blockIndex,timestamp:new Date().toISOString(),previousHash:'0000000000000000000a5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',hash:'0000000000000000000b5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2b',data:\"Block data \".concat(blockIndex),nonce:12345,difficulty:5,validator:'validator_1'};setSelectedBlock(sampleBlock);setSelectedTransaction(null);return;}// Check if query is a transaction ID\nif(query.startsWith('0x')&&query.length===66){// In a real implementation, we would fetch the transaction\n// const transaction = await blockchainAPI.getTransaction(query);\n// For now, we'll use sample data\nconst sampleTransaction={id:query,inputs:[{txid:'prev_tx_123',vout:0,signature:'sample_signature',pubKey:'sample_public_key'}],outputs:[{value:10,pubKeyHash:'recipient_address'}],time:new Date().toISOString()};setSelectedTransaction(sampleTransaction);setSelectedBlock(null);return;}// If we reach here, the query didn't match any known formats\nsetError('No block or transaction found with that identifier');}catch(err){setError('Search failed. Please try again.');}};return/*#__PURE__*/_jsxs(\"div\",{className:\"blockchain-explorer\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-3xl font-bold text-white mb-8 text-center bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\",children:\"Blockchain Explorer\"}),/*#__PURE__*/_jsx(NetworkStats,{onSearch:handleSearch}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"mt-4 p-4 bg-red-900 bg-opacity-50 rounded-lg border border-red-700 text-red-200\",children:error}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-8\",children:[!selectedBlock&&!selectedTransaction&&/*#__PURE__*/_jsx(BlockList,{blocks:blocks,loading:loading,onBlockSelect:handleBlockSelect}),selectedBlock&&!selectedTransaction&&/*#__PURE__*/_jsx(BlockDetail,{block:selectedBlock,onBack:handleBackToBlocks,onTransactionSelect:handleTransactionSelect}),selectedTransaction&&/*#__PURE__*/_jsx(TransactionDetail,{transaction:selectedTransaction,onBack:handleBackToBlockDetail})]})]});};export default BlockchainExplorer;","map":{"version":3,"names":["React","useState","useEffect","BlockList","BlockDetail","TransactionDetail","NetworkStats","jsx","_jsx","jsxs","_jsxs","BlockchainExplorer","blocks","setBlocks","selectedBlock","setSelectedBlock","selectedTransaction","setSelectedTransaction","loading","setLoading","error","setError","fetchBlocks","sampleBlocks","index","timestamp","Date","toISOString","previousHash","hash","data","nonce","difficulty","validator","now","err","handleBlockSelect","block","handleTransactionSelect","transaction","handleBackToBlocks","handleBackToBlockDetail","handleSearch","query","test","blockIndex","parseInt","sampleBlock","concat","startsWith","length","sampleTransaction","id","inputs","txid","vout","signature","pubKey","outputs","value","pubKeyHash","time","className","children","onSearch","onBlockSelect","onBack","onTransactionSelect"],"sources":["/Users/admin/Documents/Forbest/Coubcore/frontend/src/components/BlockchainExplorer.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Block, Transaction } from '../types/blockchain';\nimport * as blockchainAPI from '../services/blockchainAPI';\nimport BlockList from './BlockList';\nimport BlockDetail from './BlockDetail';\nimport TransactionDetail from './TransactionDetail';\nimport NetworkStats from './NetworkStats';\n\nconst BlockchainExplorer: React.FC = () => {\n  const [blocks, setBlocks] = useState<Block[]>([]);\n  const [selectedBlock, setSelectedBlock] = useState<Block | null>(null);\n  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // Fetch initial blocks\n  useEffect(() => {\n    const fetchBlocks = async () => {\n      try {\n        setLoading(true);\n        // In a real implementation, we would fetch actual blocks\n        // For now, we'll use sample data\n        const sampleBlocks: Block[] = [\n          {\n            index: 100,\n            timestamp: new Date().toISOString(),\n            previousHash: '0000000000000000000a5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n            hash: '0000000000000000000b5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2b',\n            data: 'Block data 100',\n            nonce: 12345,\n            difficulty: 5,\n            validator: 'validator_1'\n          },\n          {\n            index: 99,\n            timestamp: new Date(Date.now() - 1000 * 60 * 10).toISOString(),\n            previousHash: '0000000000000000000a4d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n            hash: '0000000000000000000a5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n            data: 'Block data 99',\n            nonce: 23456,\n            difficulty: 5,\n            validator: 'validator_2'\n          },\n          {\n            index: 98,\n            timestamp: new Date(Date.now() - 1000 * 60 * 20).toISOString(),\n            previousHash: '0000000000000000000a3d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n            hash: '0000000000000000000a4d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n            data: 'Block data 98',\n            nonce: 34567,\n            difficulty: 5,\n            validator: 'validator_1'\n          }\n        ];\n        setBlocks(sampleBlocks);\n        setLoading(false);\n      } catch (err) {\n        setError('Failed to fetch blocks');\n        setLoading(false);\n      }\n    };\n\n    fetchBlocks();\n  }, []);\n\n  const handleBlockSelect = async (block: Block) => {\n    setSelectedBlock(block);\n    setSelectedTransaction(null);\n  };\n\n  const handleTransactionSelect = (transaction: Transaction) => {\n    setSelectedTransaction(transaction);\n  };\n\n  const handleBackToBlocks = () => {\n    setSelectedBlock(null);\n  };\n\n  const handleBackToBlockDetail = () => {\n    setSelectedTransaction(null);\n  };\n\n  const handleSearch = async (query: string) => {\n    try {\n      // Check if query is a block index\n      if (/^\\d+$/.test(query)) {\n        const blockIndex = parseInt(query, 10);\n        // In a real implementation, we would fetch the block\n        // const block = await blockchainAPI.getBlock(blockIndex);\n        // For now, we'll use sample data\n        const sampleBlock: Block = {\n          index: blockIndex,\n          timestamp: new Date().toISOString(),\n          previousHash: '0000000000000000000a5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2a',\n          hash: '0000000000000000000b5d2a4a898d2a4a898d2a4a898d2a4a898d2a4a898d2b',\n          data: `Block data ${blockIndex}`,\n          nonce: 12345,\n          difficulty: 5,\n          validator: 'validator_1'\n        };\n        setSelectedBlock(sampleBlock);\n        setSelectedTransaction(null);\n        return;\n      }\n\n      // Check if query is a transaction ID\n      if (query.startsWith('0x') && query.length === 66) {\n        // In a real implementation, we would fetch the transaction\n        // const transaction = await blockchainAPI.getTransaction(query);\n        // For now, we'll use sample data\n        const sampleTransaction: Transaction = {\n          id: query,\n          inputs: [{\n            txid: 'prev_tx_123',\n            vout: 0,\n            signature: 'sample_signature',\n            pubKey: 'sample_public_key'\n          }],\n          outputs: [{\n            value: 10,\n            pubKeyHash: 'recipient_address'\n          }],\n          time: new Date().toISOString()\n        };\n        setSelectedTransaction(sampleTransaction);\n        setSelectedBlock(null);\n        return;\n      }\n\n      // If we reach here, the query didn't match any known formats\n      setError('No block or transaction found with that identifier');\n    } catch (err) {\n      setError('Search failed. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"blockchain-explorer\">\n      <h1 className=\"text-3xl font-bold text-white mb-8 text-center bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n        Blockchain Explorer\n      </h1>\n\n      <NetworkStats onSearch={handleSearch} />\n\n      {error && (\n        <div className=\"mt-4 p-4 bg-red-900 bg-opacity-50 rounded-lg border border-red-700 text-red-200\">\n          {error}\n        </div>\n      )}\n\n      <div className=\"mt-8\">\n        {!selectedBlock && !selectedTransaction && (\n          <BlockList blocks={blocks} loading={loading} onBlockSelect={handleBlockSelect} />\n        )}\n\n        {selectedBlock && !selectedTransaction && (\n          <BlockDetail block={selectedBlock} onBack={handleBackToBlocks} onTransactionSelect={handleTransactionSelect} />\n        )}\n\n        {selectedTransaction && (\n          <TransactionDetail transaction={selectedTransaction} onBack={handleBackToBlockDetail} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default BlockchainExplorer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}